{"version":3,"sources":["constants/constants.js","logo.svg","components/ImagesList.js","actions/viewListS3Item.js","actions/selectS3Item.js","container/ListContainer.js","App.js","reportWebVitals.js","reducers/reducer.js","index.js"],"names":["module","exports","VIEW_LIST_S3_ITEM","SELECT_S3_ITEM","PROTO","HOST","PORT","IMAGES_PATH","ImagesList","props","state","imageState","update","url","axios","get","then","response","i","data","length","stateData","image_url","setState","catch","err","console","log","this","fetchData","key","onSelect","imagesText","checked","image","blob","Blob","headers","type","window","URL","createObjectURL","a","document","createElement","setAttribute","click","images","keys","map","value","inputKey","toString","push","className","src","name","onChange","selectCheckbox","onClick","downloadAsCsv","React","Component","viewListS3Item","item","evaluate","items","stateCopy","stateDict","selectS3Item","ListContainer","connect","dispatch","onLoad","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","reducer","combineReducers","action","store","createStore","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.b924854d.chunk.js","sourcesContent":["const VIEW_LIST_S3_ITEM = \"VIEW_LIST_S3_ITEM\";\r\nconst SELECT_S3_ITEM = \"SELECT_S3_ITEM\";\r\nconst PROTO = \"http\";\r\nconst HOST = \"localhost\";\r\nconst PORT = 8080;\r\nconst IMAGES_PATH = \"https://journal-ai-php-logs.s3.eu-west-2.amazonaws.com/\";\r\n\r\nmodule.exports = {\r\n    VIEW_LIST_S3_ITEM,\r\n    SELECT_S3_ITEM,\r\n    PROTO,\r\n    HOST,\r\n    PORT,\r\n    IMAGES_PATH\r\n};","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from \"react\";\r\nimport { HOST, PORT, PROTO, IMAGES_PATH } from \"../constants/constants.js\";\r\nimport axios from 'axios';\r\n\r\n// define the data in the Presentation Component so that we update state once\r\n\r\nclass ImagesList extends React.Component {\r\n    static stateData = [];\r\n    \r\n    state = {\r\n        imageState: null,\r\n        update: false,\r\n        url: \"\"\r\n    }\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    fetchData() {\r\n        var data = axios.get(PROTO + \"://\" + HOST + \":\" + PORT + \"/list-s3\")\r\n            .then(response => {\r\n                for(var i = 0; i < response.data.length; i++) {\r\n                    ImagesList.stateData[ImagesList.stateData.length] = {\r\n                        \"image\": IMAGES_PATH + response.data[i].image_url,\r\n                        \"checked\": false,\r\n                        \"viewed\": false\r\n                    };\r\n                }\r\n                this.setState({\r\n                    update: true\r\n                });\r\n                return response;\r\n            }).catch(err => {\r\n                console.log(err);\r\n            });\r\n\r\n    }\r\n\r\n    componentWillMount() {\r\n        this.fetchData();\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({\r\n            imageState: ImagesList.stateData\r\n        });\r\n    }\r\n\r\n    selectCheckbox(key) {\r\n        this.props.onSelect([key]);\r\n    }\r\n\r\n    downloadAsCsv() {\r\n        var imagesText = \"\", csvText = \"\";\r\n        var headers = \"image_url\";\r\n        for(var i = 0; i < ImagesList.stateData.length; i++) {\r\n            if(ImagesList.stateData[i].checked) {\r\n                imagesText += ImagesList.stateData[i].image + \"\\n\";\r\n            }\r\n        }\r\n        csvText = headers + \"\\n\" + imagesText;\r\n        const blob = new Blob([csvText], {type: 'text/csv'});\r\n        const url = window.URL.createObjectURL(blob);\r\n        var a = document.createElement(\"a\");\r\n        a.setAttribute(\"hidden\", \"\");\r\n        a.setAttribute(\"href\", url);\r\n        a.setAttribute(\"download\", \"download.csv\");\r\n        a.click();\r\n    }\r\n\r\n    render() {\r\n        var imageState = this.props.imageState; // stateDict\r\n        var images = null, keys = [];\r\n        for(var key in imageState) {\r\n            ImagesList.stateData[key] = imageState[key];\r\n        }\r\n        if(this.state.imageState) {\r\n            images = this.state.imageState.map((value, key) => {\r\n                var inputKey = \"checkbox\" + \"[\" + key.toString() + \"]\";\r\n                keys.push(key);\r\n                return (\r\n                    <div className=\"image-box\" key={key}>\r\n                        <div className=\"image-tile\">\r\n                            <img src={value['image']} />\r\n                        </div>\r\n                        <div className=\"image-checkbox\">\r\n                            <input type=\"checkbox\" name={inputKey} onChange={() => this.selectCheckbox(key)} />\r\n                        </div>\r\n                    </div>\r\n                );\r\n            });\r\n        }\r\n        return (\r\n            <div className=\"clearfix\">\r\n                <div className=\"row\">\r\n                    <button onClick={() => this.downloadAsCsv()}>Download Image URL(s)</button>\r\n                </div>\r\n                <div className=\"row\">\r\n                    { images }\r\n                </div>\r\n                <div className=\"row\">\r\n                    <button onClick={() => this.downloadAsCsv()}>Download Image URL(s)</button>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <p>{this.state['url']}</p>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport {\r\n    ImagesList\r\n};","import { VIEW_LIST_S3_ITEM } from \"../constants/constants.js\";\r\nimport { ImagesList } from '../components/ImagesList.js';\r\n\r\nconst viewListS3Item = (name) => {\r\n    return {\r\n        type: VIEW_LIST_S3_ITEM,\r\n        item: {\r\n            \"viewed\": true,\r\n            name: name\r\n        },\r\n        evaluate: function(items) {\r\n            var key = 0, stateCopy = null, stateDict = {};\r\n            for (var i = 0; i < items.length; i++) {\r\n                key = items[i];\r\n                stateCopy = ImagesList.stateData[key];\r\n                stateDict[key] = {\r\n                    \"image\": stateCopy[\"image\"],\r\n                    \"checked\": stateCopy[\"checked\"],\r\n                    \"viewed\": true\r\n                };\r\n            }\r\n            return stateDict;\r\n        }\r\n    };\r\n};\r\n  \r\nexport default viewListS3Item;","import { SELECT_S3_ITEM } from \"../constants/constants.js\";\r\nimport { ImagesList } from '../components/ImagesList.js';\r\n\r\nconst selectS3Item = (name) => {\r\n    return {\r\n        type: SELECT_S3_ITEM,\r\n        item: {\r\n            \"viewed\": true,\r\n            name: name\r\n        },\r\n        evaluate: function(items) {\r\n            var key = 0, stateCopy = null, stateDict = {};\r\n            for (var i = 0; i < items.length; i++) {\r\n                key = items[i];\r\n                stateCopy = ImagesList.stateData[key];\r\n                stateDict[key] = {\r\n                    \"image\": stateCopy[\"image\"],\r\n                    \"checked\": true,\r\n                    \"viewed\": stateCopy[\"viewed\"]\r\n                };\r\n            }\r\n            return stateDict;\r\n        }\r\n    };\r\n};\r\n  \r\nexport default selectS3Item;","import { connect } from \"react-redux\";\r\nimport { ImagesList } from './../components/ImagesList.js';\r\nimport viewListS3Item from '../actions/viewListS3Item.js';\r\nimport selectS3Item from '../actions/selectS3Item.js';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        imageState: state.imageState\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onLoad: (name) => {\r\n            dispatch(viewListS3Item(name))\r\n        },\r\n        onSelect: (name) => {\r\n            dispatch(selectS3Item(name));\r\n        }\r\n    };\r\n};\r\n\r\nconst ListContainer = connect(mapStateToProps, mapDispatchToProps)(\r\n    ImagesList\r\n);\r\n\r\nexport default ListContainer;","import logo from './logo.svg';\nimport './App.css';\nimport ListContainer from './container/ListContainer.js';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"row\">\n        <ListContainer />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { combineReducers } from \"redux\";\r\nimport { VIEW_LIST_S3_ITEM, SELECT_S3_ITEM } from \"../constants/constants.js\";\r\nimport { ImagesList } from '../components/ImagesList.js';\r\n\r\n// define the state in reducer\r\n\r\nconst imageState = (state = ImagesList.stateData, action) => {\r\n    switch(action.type) {\r\n        case VIEW_LIST_S3_ITEM:\r\n        case SELECT_S3_ITEM:\r\n            var stateDict = action.evaluate(action.item.name); // stateDict\r\n            return stateDict;\r\n            break;\r\n\r\n        default:\r\n            return {};\r\n            break;\r\n    }\r\n};\r\n\r\nconst reducer = combineReducers({\r\n    imageState\r\n});\r\n\r\nexport default reducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport reducer from './reducers/reducer.js';\n\nvar store = createStore(reducer);\n\nReactDOM.render(\n  <Provider store={store}>\n      <App />\n  </Provider>,\ndocument.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}